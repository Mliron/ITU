import { shallowRef, ref } from 'vue-demi';
import axios from 'axios';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
function useAxios(url, ...args) {
  let config = {};
  let instance = axios;
  if (args.length > 0) {
    if ("request" in args[0])
      instance = args[0];
    else
      config = args[0];
  }
  if (args.length > 1) {
    if ("request" in args[1])
      instance = args[1];
  }
  const response = shallowRef();
  const data = shallowRef();
  const isFinished = ref(false);
  const isLoading = ref(true);
  const aborted = ref(false);
  const error = shallowRef();
  const cancelToken = axios.CancelToken.source();
  const abort = (message) => {
    if (isFinished.value || !isLoading.value)
      return;
    cancelToken.cancel(message);
    aborted.value = true;
    isLoading.value = false;
    isFinished.value = false;
  };
  instance(url, __spreadProps(__spreadValues({}, config), { cancelToken: cancelToken.token })).then((r) => {
    response.value = r;
    data.value = r.data;
  }).catch((e) => {
    error.value = e;
  }).finally(() => {
    isLoading.value = false;
    isFinished.value = true;
  });
  return {
    response,
    data,
    error,
    finished: isFinished,
    loading: isLoading,
    isFinished,
    isLoading,
    cancel: abort,
    canceled: aborted,
    aborted,
    abort
  };
}

export { useAxios };
